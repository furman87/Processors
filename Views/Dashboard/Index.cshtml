@model IEnumerable<Processors.Models.ProcessorStatistics>
@{
    ViewData["Title"] = "Message Processor Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Light Theme (Default) */
    :root {
        --bg-primary: #ffffff;
        --bg-secondary: #f8f9fa;
        --text-primary: #212529;
        --text-secondary: #6c757d;
        --border-color: #dee2e6;
        --card-bg: #ffffff;
        --navbar-bg: #343a40;
        --navbar-text: #ffffff;
        --btn-primary: #007bff;
        --btn-success: #28a745;
        --btn-danger: #dc3545;
        --btn-warning: #ffc107;
        --btn-info: #17a2b8;
    }

    /* Dark Theme */
    [data-theme="dark"] {
        --bg-primary: #1a1a1a;
        --bg-secondary: #2d2d2d;
        --text-primary: #ffffff;
        --text-secondary: #b0b0b0;
        --border-color: #404040;
        --card-bg: #2d2d2d;
        --navbar-bg: #1a1a1a;
        --navbar-text: #ffffff;
        --btn-primary: #0d6efd;
        --btn-success: #28a745;
        --btn-danger: #dc3545;
        --btn-warning: #ffc107;
        --btn-info: #17a2b8;
    }

    .processor-tile {
        transition: transform 0.2s ease-in-out, box-shadow 0.3s ease;
        border-left: 4px solid #007bff;
        background-color: var(--card-bg);
        border: 1px solid var(--border-color);
    }
    
    .processor-tile:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    [data-theme="dark"] .processor-tile:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.4);
    }
    
    .processor-tile.running {
        border-left-color: #28a745;
    }
    
    .processor-tile.stopped {
        border-left-color: #dc3545;
    }
    
    .processor-tile.error {
        border-left-color: #ffc107;
    }
    
    .processor-tile.not-started {
        border-left-color: #6c757d;
    }
    
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 8px;
    }
    
    .status-running { 
        background-color: #28a745;
        box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
    }
    
    .status-stopped { 
        background-color: #dc3545;
        box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
    }
    
    .status-error { 
        background-color: #ffc107;
        box-shadow: 0 0 10px rgba(255, 193, 7, 0.5);
    }
    
    .status-not-started { 
        background-color: #6c757d;
        box-shadow: 0 0 10px rgba(108, 117, 125, 0.5);
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #007bff;
    }
    
    [data-theme="dark"] .metric-value {
        color: #4dabf7;
    }
    
    .metric-label {
        font-size: 0.875rem;
        color: var(--text-secondary);
        text-transform: uppercase;
    }
    
    .processor-name {
        color: var(--text-primary);
        font-weight: 600;
    }
    
    [data-theme="dark"] .processor-tile.running .processor-name {
        color: #28a745;
    }
    
    [data-theme="dark"] .processor-tile.stopped .processor-name {
        color: #dc3545;
    }
    
    [data-theme="dark"] .processor-tile.error .processor-name {
        color: #ffc107;
    }
    
    [data-theme="dark"] .processor-tile.not-started .processor-name {
        color: #6c757d;
    }
    
    .uptime-info, .last-updated {
        font-size: 0.875rem;
        color: var(--text-secondary);
    }
    
    [data-theme="dark"] .card-body {
        background-color: var(--card-bg);
    }
    
    [data-theme="dark"] .border-top {
        border-color: var(--border-color) !important;
    }
    
    .btn-control {
        transition: all 0.3s ease;
    }
    
    [data-theme="dark"] .btn-outline-success:hover {
        background-color: #28a745;
        border-color: #28a745;
    }
    
    [data-theme="dark"] .btn-outline-danger:hover {
        background-color: #dc3545;
        border-color: #dc3545;
    }
    
    .dashboard-header {
        background-color: var(--bg-primary);
        padding: 1rem 0;
        margin-bottom: 2rem;
    }
    
    [data-theme="dark"] .dashboard-header {
        border-bottom: 1px solid var(--border-color);
    }
    
    .manage-configs-btn {
        background-color: transparent;
        border: 1px solid #17a2b8;
        color: #17a2b8;
    }
    
    [data-theme="dark"] .manage-configs-btn {
        border-color: #20c997;
        color: #20c997;
    }
    
    [data-theme="dark"] .manage-configs-btn:hover {
        background-color: #20c997;
        border-color: #20c997;
        color: #000;
    }
    
    .status-summary {
        display: flex;
        align-items: center;
    }
    
    .filter-result {
        font-style: italic;
    }
    
    .btn-check:checked + .btn-outline-success {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }
    
    .btn-check:checked + .btn-outline-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }
    
    .btn-check:checked + .btn-outline-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }
    
    [data-theme="dark"] .btn-check:checked + .btn-outline-success {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }
    
    [data-theme="dark"] .btn-check:checked + .btn-outline-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }
    
    [data-theme="dark"] .btn-check:checked + .btn-outline-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }
    
    .processor-item {
        transition: opacity 0.3s ease-in-out;
    }
    
    .processor-item[style*="display: none"] {
        opacity: 0;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="dashboard-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="h2 mb-0">
                        <i class="fas fa-cogs"></i>
                        Message Processor Dashboard
                    </h1>
                    <div class="d-flex gap-2 align-items-center">
                        <!-- Filter Controls -->
                        <div class="btn-group me-3" role="group" aria-label="Processor Filter">
                            <input type="radio" class="btn-check" name="processorFilter" id="filterAll" value="all" checked>
                            <label class="btn btn-outline-secondary btn-sm" for="filterAll">
                                <i class="fas fa-list"></i>
                                All
                            </label>

                            <input type="radio" class="btn-check" name="processorFilter" id="filterRunning" value="running">
                            <label class="btn btn-outline-success btn-sm" for="filterRunning">
                                <i class="fas fa-play-circle"></i>
                                Running
                            </label>

                            <input type="radio" class="btn-check" name="processorFilter" id="filterStopped" value="stopped">
                            <label class="btn btn-outline-danger btn-sm" for="filterStopped">
                                <i class="fas fa-stop-circle"></i>
                                Stopped
                            </label>

                            <input type="radio" class="btn-check" name="processorFilter" id="filterNotStarted" value="not-started">
                            <label class="btn btn-outline-secondary btn-sm" for="filterNotStarted">
                                <i class="fas fa-pause-circle"></i>
                                Not Started
                            </label>
                        </div>

                        <a href="/ConfigurationManagement" class="btn manage-configs-btn">
                            <i class="fas fa-cog"></i>
                            Manage Configurations
                        </a>
                        <div>
                            <button class="btn btn-outline-primary" onclick="toggleAutoRefresh()">
                                <i class="fas fa-sync-alt" id="refresh-icon"></i>
                                <span id="refresh-text">Auto Refresh: OFF</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Status Summary -->
            <div class="row mb-3">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body py-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex gap-4">
                                    <div class="status-summary">
                                        <span class="badge bg-success" id="runningCount">0</span>
                                        <small class="text-muted ms-1">Running</small>
                                    </div>
                                    <div class="status-summary">
                                        <span class="badge bg-danger" id="stoppedCount">0</span>
                                        <small class="text-muted ms-1">Stopped</small>
                                    </div>
                                    <div class="status-summary">
                                        <span class="badge bg-secondary" id="notStartedCount">0</span>
                                        <small class="text-muted ms-1">Not Started</small>
                                    </div>
                                    <div class="status-summary">
                                        <span class="badge bg-warning" id="errorCount">0</span>
                                        <small class="text-muted ms-1">With Errors</small>
                                    </div>
                                    <div class="status-summary">
                                        <span class="badge bg-info" id="totalCount">0</span>
                                        <small class="text-muted ms-1">Total</small>
                                    </div>
                                </div>
                                <div class="filter-result">
                                    <small class="text-muted" id="filterResultText">Showing all processors</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row" id="processor-grid">
                @if (Model != null && Model.Any())
                {
                    @foreach (var processor in Model)
                    {
                        <div class="col-lg-4 col-md-6 mb-4 processor-item" 
                             data-status="@(processor.IsRunning ? "running" : "stopped")"
                             data-has-errors="@(processor.ErrorCount > 0 ? "true" : "false")"
                             data-processor-name="@processor.ProcessorName"
                             data-processor-status="@processor.Status">
                            <div class="card processor-tile @(processor.IsRunning ? "running" : processor.ErrorCount > 0 ? "error" : processor.Status == "Not Started" ? "not-started" : "stopped")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h5 class="card-title mb-0 processor-name">
                                            <span class="status-indicator @(processor.IsRunning ? "status-running" : processor.ErrorCount > 0 ? "status-error" : processor.Status == "Not Started" ? "status-not-started" : "status-stopped")"></span>
                                            @processor.ProcessorName
                                        </h5>
                                        <div class="d-flex flex-column align-items-end gap-1">
                                            <div class="btn-group btn-group-sm">
                                                @if (processor.IsRunning)
                                                {
                                                    <button class="btn btn-outline-danger btn-control" 
                                                            onclick="stopProcessor('@processor.ProcessorName')"
                                                            title="Stop Processor">
                                                        <i class="fas fa-stop"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-outline-success btn-control" 
                                                            onclick="startProcessor('@processor.ProcessorName')"
                                                            title="Start Processor">
                                                        <i class="fas fa-play"></i>
                                                    </button>
                                                }
                                            </div>
                                            <small class="text-muted processor-start-mode" data-processor="@processor.ProcessorName">
                                                <i class="fas fa-circle-notch fa-spin" style="display: none;"></i>
                                                <span class="start-mode-text">Loading...</span>
                                            </small>
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="metric-value">@processor.MessagesPerMinute.ToString("F1")</div>
                                            <div class="metric-label">MSG/MIN</div>
                                        </div>
                                        <div class="col-6">
                                            <div class="metric-value">@processor.PendingMessages</div>
                                            <div class="metric-label">PENDING</div>
                                        </div>
                                    </div>
                                    
                                    <div class="row mt-2">
                                        <div class="col-6">
                                            <div class="metric-value">@processor.TotalProcessed</div>
                                            <div class="metric-label">TOTAL</div>
                                        </div>
                                        <div class="col-6">
                                            <div class="metric-value text-@(processor.ErrorCount > 0 ? "danger" : "muted")">@processor.ErrorCount</div>
                                            <div class="metric-label">ERRORS</div>
                                        </div>
                                    </div>
                                    
                                    @if (processor.Status == "Not Started")
                                    {
                                        <div class="mt-3 pt-2 border-top">
                                            <div class="text-muted text-center">
                                                <i class="fas fa-pause"></i>
                                                Processor not started yet
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-3 pt-2 border-top">
                                            <div class="uptime-info">
                                                <i class="fas fa-clock"></i>
                                                Uptime: @(processor.Uptime.Days > 0 ? $"{processor.Uptime.Days}d " : "")@processor.Uptime.ToString(@"hh\:mm\:ss")
                                            </div>
                                        </div>
                                    }
                                    
                                    <div class="mt-1">
                                        <div class="last-updated">
                                            <i class="fas fa-sync-alt"></i>
                                            Last Updated: @processor.LastUpdated.ToString("HH:mm:ss")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12" id="no-processors-message">
                        <div class="alert alert-info text-center">
                            <i class="fas fa-info-circle"></i>
                            No processors found. Start some processors to see their statistics here.
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let autoRefreshEnabled = false;
        let refreshInterval;
        let currentFilter = 'all';

        // Load processor auto-start status on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadProcessorAutoStartStatus();
            updateStatusCounts();
            setupFilterEventListeners();
        });

        function setupFilterEventListeners() {
            const filterRadios = document.querySelectorAll('input[name="processorFilter"]');
            filterRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    if (this.checked) {
                        currentFilter = this.value;
                        applyFilter(currentFilter);
                        updateFilterResultText();
                    }
                });
            });
        }

        function applyFilter(filterType) {
            const processorItems = document.querySelectorAll('.processor-item');
            let visibleCount = 0;

            processorItems.forEach(item => {
                const status = item.getAttribute('data-status');
                const processorStatus = item.getAttribute('data-processor-status');
                const hasErrors = item.getAttribute('data-has-errors') === 'true';
                let shouldShow = false;

                switch (filterType) {
                    case 'all':
                        shouldShow = true;
                        break;
                    case 'running':
                        shouldShow = status === 'running';
                        break;
                    case 'stopped':
                        shouldShow = status === 'stopped' && processorStatus !== 'Not Started';
                        break;
                    case 'not-started':
                        shouldShow = processorStatus === 'Not Started';
                        break;
                }

                if (shouldShow) {
                    item.style.display = 'block';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });

            // Show/hide no processors message
            const noProcessorsMessage = document.getElementById('no-processors-message');
            if (noProcessorsMessage) {
                if (visibleCount === 0 && processorItems.length > 0) {
                    // Create filtered no results message if it doesn't exist
                    let filteredMessage = document.getElementById('filtered-no-results');
                    if (!filteredMessage) {
                        filteredMessage = document.createElement('div');
                        filteredMessage.id = 'filtered-no-results';
                        filteredMessage.className = 'col-12';
                        filteredMessage.innerHTML = `
                            <div class="alert alert-warning text-center">
                                <i class="fas fa-filter"></i>
                                No processors match the current filter. <a href="#" onclick="clearFilter()">Show all processors</a>
                            </div>
                        `;
                        document.getElementById('processor-grid').appendChild(filteredMessage);
                    }
                    filteredMessage.style.display = 'block';
                } else {
                    const filteredMessage = document.getElementById('filtered-no-results');
                    if (filteredMessage) {
                        filteredMessage.style.display = 'none';
                    }
                }
            }
        }

        function clearFilter() {
            document.getElementById('filterAll').checked = true;
            currentFilter = 'all';
            applyFilter('all');
            updateFilterResultText();
        }

        function updateFilterResultText() {
            const filterResultText = document.getElementById('filterResultText');
            const processorItems = document.querySelectorAll('.processor-item');
            const visibleItems = Array.from(processorItems).filter(item => item.style.display !== 'none');
            
            let text = '';
            switch (currentFilter) {
                case 'all':
                    text = `Showing all ${processorItems.length} processors`;
                    break;
                case 'running':
                    text = `Showing ${visibleItems.length} running processors`;
                    break;
                case 'stopped':
                    text = `Showing ${visibleItems.length} stopped processors`;
                    break;
                case 'not-started':
                    text = `Showing ${visibleItems.length} not started processors`;
                    break;
            }
            
            if (filterResultText) {
                filterResultText.textContent = text;
            }
        }

        function updateStatusCounts() {
            const processorItems = document.querySelectorAll('.processor-item');
            let runningCount = 0;
            let stoppedCount = 0;
            let notStartedCount = 0;
            let errorCount = 0;
            let totalCount = processorItems.length;

            processorItems.forEach(item => {
                const status = item.getAttribute('data-status');
                const processorStatus = item.getAttribute('data-processor-status');
                const hasErrors = item.getAttribute('data-has-errors') === 'true';

                if (status === 'running') {
                    runningCount++;
                } else if (processorStatus === 'Not Started') {
                    notStartedCount++;
                } else {
                    stoppedCount++;
                }

                if (hasErrors) {
                    errorCount++;
                }
            });

            // Update count displays
            document.getElementById('runningCount').textContent = runningCount;
            document.getElementById('stoppedCount').textContent = stoppedCount;
            document.getElementById('notStartedCount').textContent = notStartedCount;
            document.getElementById('errorCount').textContent = errorCount;
            document.getElementById('totalCount').textContent = totalCount;
        }

        async function loadProcessorAutoStartStatus() {
            try {
                const response = await fetch('/api/configuration');
                if (response.ok) {
                    const configurations = await response.json();
                    
                    // Update each processor's auto-start display
                    configurations.forEach(config => {
                        const processorElement = document.querySelector(`[data-processor="${config.name}"]`);
                        if (processorElement) {
                            const textElement = processorElement.querySelector('.start-mode-text');
                            const loadingIcon = processorElement.querySelector('.fa-spin');
                            
                            if (textElement) {
                                if (config.autoStart) {
                                    textElement.innerHTML = '<i class="fas fa-play-circle text-success"></i> Auto Start';
                                } else {
                                    textElement.innerHTML = '<i class="fas fa-pause-circle text-warning"></i> Manual Start';
                                }
                            }
                            
                            if (loadingIcon) {
                                loadingIcon.style.display = 'none';
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading processor configurations:', error);
                // Hide loading indicators
                document.querySelectorAll('.fa-spin').forEach(icon => {
                    icon.style.display = 'none';
                });
                document.querySelectorAll('.start-mode-text').forEach(text => {
                    text.textContent = 'Unknown';
                });
            }
        }

        function toggleAutoRefresh() {
            const icon = document.getElementById('refresh-icon');
            const text = document.getElementById('refresh-text');
            
            if (autoRefreshEnabled) {
                clearInterval(refreshInterval);
                autoRefreshEnabled = false;
                icon.classList.remove('fa-spin');
                text.textContent = 'Auto Refresh: OFF';
            } else {
                refreshInterval = setInterval(refreshDashboard, 5000);
                autoRefreshEnabled = true;
                icon.classList.add('fa-spin');
                text.textContent = 'Auto Refresh: ON';
            }
        }

        function refreshDashboard() {
            fetch('/api/processors/statistics')
                .then(response => response.json())
                .then(data => updateDashboard(data))
                .catch(error => console.error('Error refreshing dashboard:', error));
        }

        function updateDashboard(processors) {
            // Update processor tiles with new data
            // This is a simplified update - in practice you'd want more sophisticated DOM updates
            location.reload();
        }

        async function startProcessor(processorName) {
            try {
                const response = await fetch(`/api/processors/${processorName}/start`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showNotification(`Processor ${processorName} started successfully`, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    const errorText = await response.text();
                    showNotification(`Failed to start processor ${processorName}: ${errorText}`, 'error');
                }
            } catch (error) {
                showNotification(`Error starting processor ${processorName}: ${error.message}`, 'error');
            }
        }

        async function stopProcessor(processorName) {
            try {
                const response = await fetch(`/api/processors/${processorName}/stop`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showNotification(`Processor ${processorName} stopped successfully`, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    const errorText = await response.text();
                    showNotification(`Failed to stop processor ${processorName}: ${errorText}`, 'error');
                }
            } catch (error) {
                showNotification(`Error stopping processor ${processorName}: ${error.message}`, 'error');
            }
        }

        function showNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const notification = document.createElement('div');
            notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 80px; right: 20px; z-index: 1050; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }
    </script>
}